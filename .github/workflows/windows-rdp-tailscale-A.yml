name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

# USER-DEFINED CREDENTIALS AND HOSTNAME
env:
  RDP_USER: ZAroo
  RDP_PASS: ZAroo123!
  TS_HOSTNAME: ZAroo # <-- FINAL HOSTNAME

jobs:
  rdp:
    runs-on: windows-2025
    timeout-minutes: 370
    steps:
      - name: 🔧 Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET: ${{ secrets.TS_TAILNET }}
          RAW_APIKEY: ${{ secrets.TS_API_KEY }}
          RAW_AUTHKEY: ${{ secrets.TS_AUTHKEY }}
          RAW_PAT: ${{ secrets.GH_API_TOKEN }}
          RAW_TEST: ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS: ${{ inputs.loops || '0' }}
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){[int]$v}else{[int]$def} }

          $tailnet = $env:RAW_TAILNET
          $apiKey  = $env:RAW_APIKEY
          $authKey = $env:RAW_AUTHKEY
          $pat     = $env:RAW_PAT
          if (-not $tailnet -or -not $apiKey -or -not $authKey -or -not $pat) {
            Write-Error "Missing required secrets"; exit 1
          }

          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')
          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }
          if (-not $isTest -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }
          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey"   | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authKey" | Out-File -Append $env:GITHUB_OUTPUT
          "pat=$pat"         | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops"     | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved: test=$isTest, runtime=$runtime, loops=$loops"

      - name: ⚙️ Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: 🔐 Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: 🧹 PURGE any devices containing ${{ env.TS_HOSTNAME }} (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ secrets.TS_API_KEY }}" }
          $tn  = [uri]::EscapeDataString("${{ secrets.TS_TAILNET }}")
          # The regex now searches for the actual hostname value
          $match = { param($d)
            ($d.name -match '(?i)${{ env.TS_HOSTNAME }}') -or ($d.hostname -match '(?i)${{ env.TS_HOSTNAME }}') -or ($d.DNSName -match '(?i)${{ env.TS_HOSTNAME }}')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at start: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: 🔗 Tailscale up (hostname=${{ env.TS_HOSTNAME }}) + show IP/FQDN/DERP
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ secrets.TS_AUTHKEY }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $status = & $ts status --json | ConvertFrom-Json
          $fqdn = $status.Self.DNSName
          $derp = $status.Self.DERP
          "ip4=$ip4"   | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT

          "### RDP (A)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: ⏳ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }

      - name: 🧹 PURGE any devices containing ${{ env.TS_HOSTNAME }} (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ secrets.TS_API_KEY }}" }
          $tn  = [uri]::EscapeDataString("${{ secrets.TS_TAILNET }}")
          # The regex now searches for the actual hostname value
          $match = { param($d)
            ($d.name -match '(?i)${{ env.TS_HOSTNAME }}') -or ($d.hostname -match '(?i)${{ env.TS_HOSTNAME }}') -or ($d.DNSName -match '(?i)${{ env.TS_HOSTNAME }}')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at exit: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: 🔁 Dispatch workflow B (instant, forever by default)
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching."; exit 0 }
          if ($loops -gt 1) { $next=$loops-1 } else { $next=0 }

          $token="${{ secrets.GH_API_TOKEN }}"
          $body=@{
            ref    = "${{ github.ref_name }}"
            inputs = @{
              ts_tailnet      = "${{ secrets.TS_TAILNET }}"
              ts_api_key      = "${{ secrets.TS_API_KEY }}"
              ts_authkey      = "${{ secrets.TS_AUTHKEY }}"
              gh_api_token    = "$token"
              test_mode       = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops           = "$next"
            }
          } | ConvertTo-Json -Depth 5

          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-rdp-tailscale-B.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
            
